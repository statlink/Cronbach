library(fsn)
library(fsn)
MXM::MMPC
library(fsn)
library(fsn)
qn
R = 1000
alpha = 0.05
ncol = 100
a = seq( 10, 5000, by = 10)
a <- matrix( a, ncol = ncol )
k <- a
R <- R
mat <- as.numeric(R)
qn2 <- qnorm(1 - alpha)^2
for (j in 1:100) {
for ( i in 1:5 ) {
for (l in 1:R) {
z <- Rfast::Rnorm(k[i, j])
mat[l] <- sum( abs(z) )^2 / qn2
}
a[i, j] <- mean(mat)
}
}
e <- k * (2 * k + pi -2) / ( pi * qn2 )
y1 <- as.vector( abs(e - a) / a )
k1 <- as.vector(k)
plot(k1, y1, type = 'l', ylab = 'Absolute relative error', xlab = 'Number of studies', cex.lab = 1.2, cex.axis = 1.2)
y2 <- log(y1)
x2 <- log(k1)
dev.new()
plot(x2, y2, type = 'l', ylab = 'Logarithm of absolute relative error',
xlab = 'Logarithm of the number of studies', cex.lab = 1.2, cex.axis = 1.2)
lm(y2~x2)
mod <- lm(y2 ~ x2)
mod$coefficients[1]
y1 <- as.vector( abs(e - a) / a )
k1 <- as.vector(k)
plot(k1, y1, type = 'l', ylab = 'Absolute relative error', xlab = 'Number of studies', cex.lab = 1.2, cex.axis = 1.2)
y2 <- log(y1)
x2 <- log(k1)
dev.new()
plot(x2, y2, type = 'l', ylab = 'Logarithm of absolute relative error',
xlab = 'Logarithm of the number of studies', cex.lab = 1.2, cex.axis = 1.2)
mod <- lm(y2 ~ x2)
abline(a = mod$coefficients[1], b = mod$coefficients[1], col = 2, lty = 2, lwd = 3)
mod$coefficients
abline(a = mod$coefficients[1], b = mod$coefficients[1], col = 2, lty = 2, lwd = 3)
y1 <- as.vector( abs(e - a) / a )
k1 <- as.vector(k)
plot(k1, y1, type = 'l', ylab = 'Absolute relative error', xlab = 'Number of studies', cex.lab = 1.2, cex.axis = 1.2)
y2 <- log(y1)
x2 <- log(k1)
dev.new()
plot(x2, y2, type = 'l', ylab = 'Logarithm of absolute relative error',
xlab = 'Logarithm of the number of studies', cex.lab = 1.2, cex.axis = 1.2)
mod <- lm(y2 ~ x2)
abline(a = mod$coefficients[1], b = mod$coefficients[2], col = 2, lty = 2, lwd = 3)
k = seq( 10, 5000, by = 10)
k <- matrix( a, ncol = ncol )
k
ncol
k = seq( 10, 5000, by = 10)
k <- matrix( k, ncol = ncol )
k
k[i,j]
i=1
j=1
k[i,j]
R=100
k <- matrix( k, ncol = ncol )
a <- k
R <- R
mat <- as.numeric(R)
qn2 <- qnorm(1 - alpha)^2
for (j in 1:100) {
for ( i in 1:5 ) {
for (l in 1:R) {
z <- Rfast::Rnorm(k[i, j])
mat[l] <- sum( abs(z) )^2 / qn2
}
a[i, j] <- mean(mat)
}
}
a
a <- k
R <- R
mat <- as.numeric(R)
qn2 <- qnorm(1 - alpha)^2
for ( i in 1:length(k) ) {
for (j in 1:R) {
z <- Rfast::Rnorm(k[i])
mat[j] <- sum( abs(z) )^2 / qn2
}
a[i] <- mean(mat)
}
e <- k * (2 * k + pi -2) / ( pi * qn2 )
y1 <- as.vector( abs(e - a) / a )
k1 <- as.vector(k)
plot(k1, y1, type = 'l', ylab = 'Absolute relative error', xlab = 'Number of studies', cex.lab = 1.2, cex.axis = 1.2)
y2 <- log(y1)
x2 <- log(k1)
dev.new()
plot(x2, y2, type = 'l', ylab = 'Logarithm of absolute relative error',
xlab = 'Logarithm of the number of studies', cex.lab = 1.2, cex.axis = 1.2)
mod <- lm(y2 ~ x2)
abline(a = mod$coefficients[1], b = mod$coefficients[2], col = 2, lty = 2, lwd = 3)
mod$coefficients
# k <- matrix( k, ncol = ncol )
a <- k
R <- R
mat <- as.numeric(R)
qn2 <- qnorm(1 - alpha)^2
for ( i in 1:length(k) ) {
for (j in 1:R) {
z <- abs( Rfast::Rnorm(k[i]) )
mat[j] <- sum(z)^2 / qn2
}
a[i] <- mean(mat)
}
e <- k * (2 * k + pi -2) / ( pi * qn2 )
y1 <- as.vector( abs(e - a) / a )
k1 <- as.vector(k)
plot(k1, y1, type = 'l', ylab = 'Absolute relative error', xlab = 'Number of studies', cex.lab = 1.2, cex.axis = 1.2)
y2 <- log(y1)
x2 <- log(k1)
dev.new()
plot(x2, y2, type = 'l', ylab = 'Logarithm of absolute relative error',
xlab = 'Logarithm of the number of studies', cex.lab = 1.2, cex.axis = 1.2)
mod <- lm(y2 ~ x2)
abline(a = mod$coefficients[1], b = mod$coefficients[2], col = 2, lty = 2, lwd = 3)
mod$coefficients
library(fsn)
library(grDevices)
?dev.new
f
library(fsn)
library(fsn)
library(fsn)
library(fsn)
library(fsn)
library(fsn)
library(fsn)
source('C:/Users/user/Desktop/Folder/paketo/fsn/R/halfnorm.fixednr.ci.R')
library(fsn)
library(fsn)
library(fsn)
library(fsn)
library(fsn)
book
source('C:/Users/user/Desktop/Folder/paketo/Cronbach/R/cronfree.ci.R')
a=0.8
p=20
n=100
conf=0.95
za <- rnorm(1 - conf/2)
low <- exp( za * sqrt( 0.5 * p / (p - 1) ) )
up <- exp( -za * sqrt( 0.5 * p / (p - 1) ) )
ci <- c( 1 - (1 - a) * low, 1 - (1 - a) * up )
names(ci) <- c( paste( 0.5 * (1 - conf)/2, "%" ), paste( conf + 0.5 * (1 - conf), "%" ) )
ci
low
exp( za * sqrt( 0.5 * p / (p - 1) ) )
p
n
za
za <- qnorm(1 - conf/2)
low <- exp( za * sqrt( 0.5 * p / (p - 1) / n ) )s
up <- exp( -za * sqrt( 0.5 * p / (p - 1) / n ) )
ci <- c( 1 - (1 - a) * low, 1 - (1 - a) * up )
low <- exp( za * sqrt( 0.5 * p / (p - 1) / n ) )
up <- exp( -za * sqrt( 0.5 * p / (p - 1) / n ) )
ci <- c( 1 - (1 - a) * low, 1 - (1 - a) * up )
ci
names(ci) <- c( paste( 0.5 * (1 - conf)/2, "%" ), paste( conf + 0.5 * (1 - conf), "%" ) )
ci
names(ci) <- c( paste( 0.5 * (1 - conf), "%" ), paste( conf + 0.5 * (1 - conf), "%" ) )
ci
names(ci) <- c( paste( 0.5 * (1 - conf), "%", sep = "" ), paste( conf + 0.5 * (1 - conf), "%", sep = "" ) )
ci
x=rnorm(4)
x
x=rnorm(4, 10,1)
x
x[x<0] <- 0
x
x[x>10] <- 10
x
library(Cronbach)
library(Cronbach)
library(Cronbach)
library(Cronbach)
library(Cronbach)
library(Cronbach)
## silly example
x <- as.matrix( iris[1:50, 1:4] )
cron.ci(x)
## silly example
x <- as.matrix( iris[1:50, 1:4] )
cronfree.ci(x)
x <- as.matrix( iris[1:50, 1:4] )
a <- Cronbach::cronbach(x)
cronfree.ci(a, 4, 150)
library(Cronbach)
library(Cronbach)
library(Cronbach)
library(Cronbach)
